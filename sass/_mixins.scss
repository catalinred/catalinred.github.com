/*------------------------------------*\
  Mixins
\*------------------------------------*/

/**
 * REM https://gist.github.com/webgefrickel/4530526
 * @include rem(margin, 0 12px 2 1.2)
 */

@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

/**
 * Breakpoints for media queries
 */

@mixin breakpoint($point) {
	// Large devices (large desktops, 1200px and up)
	@if $point == large {
		@media (min-width: 1200px) { @content; }
	}
	// Medium devices
	@else if $point == medium {
		@media (min-width: 992px) { @content; }
	}
	// Small devices
	@else if $point == small {
		@media (min-width: 769px)  { @content; }
	}
  // Extra small devices
  @else if $point == xsmall {
    @media (min-width: 481px)  { @content; }
  }  
}